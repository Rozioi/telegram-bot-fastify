import { Markup } from "telegraf";
import { bot } from "../../app";
import { IUser } from "../../services/user.service";

function userMapper(user: IUser): string {
	return [`ID: ${user.id}`, `Full name: ${user.full_name}`, `Username: ${user.username}`, `Register: ${!!user.reg}`].join(", ");
}

export function setupUserHandlers (): void {
    bot.command("users", async ctx => {
		try {
			const response = await fetch("http://localhost:3000/api/v1/user/");
			if (!response.ok) {
				throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
			}
			const users = await response.json();
			const userList = users.map(userMapper).join("\n") || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
			
			return await ctx.reply(userList);

		} catch (err) {
			console.error(err);
		}
	});
	bot.command("start", async ctx => {
		const { first_name, last_name, username, id } = ctx.from;
		const full_name = `${first_name ?? ''}` + `${last_name ?? ''}`;
		try {
			const response = await fetch("http://localhost:3000/api/v1/user/register", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					full_name: full_name,
					username: username ?? '',
					chatId: id,
				}),
			});
			
			const res = await response.json().catch(() => ({ message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }));
			if (!response.ok) {
				const error = await response.json().catch(() => ({ message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }));
				const errorMessage = error.message.includes("–ø–∞—Ä–∞–º–µ—Ç—Ä") ? "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: —É–∫–∞–∂–∏—Ç–µ username –∏ –∏–º—è" : "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + error.message;
				return await ctx.reply(errorMessage);
			}
			return await ctx.reply(res.message);
		} catch (err) {}
	});
	bot.command("reg", async ctx => {
		const Keyboard = Markup.keyboard(['–ü–∏—Ç–æ–º–µ—Ü', 'button12']).resize();
		try {
			const id = ctx.from.id;
			const response = await fetch(`http://localhost:3000/api/v1/user/reg/secure/user/${id}`);
			if (!response.ok) {
				const errorData = await response.json().catch(() => ({ message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }));
				const errorMessage = errorData.message || "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
				return await ctx.reply(errorMessage);
			}
			const data = await response.json();
			await ctx.reply(data.message || "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!");
			await ctx.reply('–ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏', Keyboard);
		} catch (err) {
			console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
			await ctx.reply("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É");
		}
	});
}