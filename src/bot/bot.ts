import { bot } from "../app"
import { Message } from "node-telegram-bot-api";

export const setupBotHandlers = async () => {
    bot.onText(/\/users/, async (msg: Message) => {
        const chatId = msg.chat.id;
        try {
            const response = await fetch('http://localhost:3000/api/v1/');
            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
            }
            const users = await response.json();
            const userList = users
                .map((user: any) => `ID: ${user.id}, Full name: ${user.full_name}, Username: ${user.username}, Register: ${user.reg === 1}`)
                .join('\n') || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
            await bot.sendMessage(chatId, userList);
        } catch (err) { }
    });
    bot.onText(/\/start/, async (msg: Message) => {
        const { first_name, last_name, username, id } = msg.chat;
        const full_name = `${first_name}` + `${last_name}`;
        try {
            const response = await fetch('http://localhost:3000/api/v1/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    full_name: full_name,
                    username: username,
                    chatId: id
                })
            });
            const res = await response.json().catch(() => ({ message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }));
            if (response.ok) {
                await bot.sendMessage(id, `${res.message}`);
            } else {
                const error = await response.json().catch(() => ({ message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }));
                const errorMessage = error.message.includes("–ø–∞—Ä–∞–º–µ—Ç—Ä")
                    ? "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: —É–∫–∞–∂–∏—Ç–µ username –∏ –∏–º—è"
                    : "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + error.message;

                await bot.sendMessage(id, errorMessage);
            }

        } catch (err) { }
    });
    bot.onText(/\/reg/, async (msg: Message) => {
        const { id } = msg.chat;
        try{
            const response = await fetch(`http://localhost:3000/api/v1/reg/secure/user/${id}`);
            if (response.ok) {
                const data = await response.json(); 
                await bot.sendMessage(id, data.message || "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!");
            } else {
                const errorData = await response.json().catch(() => ({ message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }));
                const errorMessage = errorData.message || "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
                await bot.sendMessage(id, errorMessage);
            }
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
            await bot.sendMessage(id, "üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É");
        }
    });
}